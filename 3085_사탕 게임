import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Arrays;

public class Main {
    
    //사탕을 교환한 임시적인 보드 생성
    public static char[][] Temp_board(char[][] board, int i, int j, int x, int y) {
        char temp = board[i][j];
        board[i][j] = board[x][y];
        board[x][y] = temp;
        
        return board;
    }
    
    //사탕의 최대 개수 검사
    public static int Check(int N, char[][] board) {
        int max = 1;
        
        //가로줄 검사
        for(int i = 0; i < N; i++) {
            int cnt = 1;
            for(int j = 0; j < N-1; j++) {
                if(board[i][j] == board[i][j+1]) {
                    cnt++;
                    if(max < cnt) {
                        max = cnt;
                    }
                } else cnt = 1;
            }
        }
        
        //세로줄 검사
        for(int j = 0; j < N; j++) {
            int cnt = 1;
            for(int i = 0; i< N-1; i++) {
                if(board[i][j] == board[i+1][j]) {
                    cnt++;
                    if(max < cnt) {
                        max = cnt;
                    }
                } else cnt = 1;
            }
        }
        
        return max;
    }

    public static void main(String[] args) throws IOException {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        int N = Integer.parseInt(br.readLine());
        char[][] board = new char[N][N];
        
        for(int i = 0; i < N; i++) {
            String st = br.readLine();
            for(int j = 0; j < N; j++) board[i][j] = st.charAt(j);
        }
        br.close();
        
        int max = 1;
        
        //가로 두개씩 체크
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N-1; j++) {
                if(board[i][j] != board[i][j+1]) {                  
                                   
                    
                    char[][] temp_board = board;
                    
                    temp_board = Temp_board(temp_board, i, j, i, j+1);
                    
                    // bw.write("템프보드\n");
                    // for(char x[] : temp_board) {
                    //     for(char y : x) {
                    //         bw.write(y);
                    //     }
                    //     bw.write("\n");
                    // }
                    
                    int check = Check(N, temp_board);
                    // bw.write(i + " " + j + " " + check + "\n\n");
                    if(max < check) {
                        max = check;
                    }
                }
            }
        }
        
        //세로 두개씩 체크
        for(int i = 0; i < N-1; i++) {
            for(int j = 0; j < N; j++) {
                if(board[i][j] != board[i+1][j]) { 
                    char[][] temp_board = Temp_board(board, i, j, i+1, j);
                    int check = Check(N, temp_board);
                    if(max < check) {
                        max = check;
                    }
                }
            }
        }
        
        bw.write(max + "\n");        

        bw.flush();
        bw.close();
    }
}
